>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> len(__import__("7-base_geometry").__doc__) > 0
True

>>> len(__import__("7-base_geometry").BaseGeometry.__doc__) > 0
True

>>> len(__import__("7-base_geometry").BaseGeometry.integer_validator.__doc__) > 0
True

>>> geo = BaseGeometry()
>>> geo.integer_validator("my_i", 6)

>>> geo.integer_validator("length", 68)

>>> geo.integer_validator("", 15)

>>> geo.integer_validator("str", "Juan")
Traceback (most recent call last):
...
TypeError: str must be an integer

>>> geo.integer_validator("year", 0)
Traceback (most recent call last):
...
ValueError: year must be greater than 0

>>> geo.integer_validator("cash", -100)
Traceback (most recent call last):
...
ValueError: cash must be greater than 0

>>> geo.integer_validator("float", 6.98)
Traceback (most recent call last):
...
TypeError: float must be an integer

>>> geo.integer_validator("NN", float('nan'))
Traceback (most recent call last):
...
TypeError: NN must be an integer

>>> geo.integer_validator("inf", float('inf'))
Traceback (most recent call last):
...
TypeError: inf must be an integer

>>> geo.integer_validator("None", None)
Traceback (most recent call last):
...
TypeError: None must be an integer

>>> geo.integer_validator("boolean", True)
Traceback (most recent call last):
...
TypeError: boolean must be an integer

>>> geo.integer_validator("list", [4, 5, 6])
Traceback (most recent call last):
...
TypeError: list must be an integer

>>> geo.integer_validator("tuple", (1, 2, 3))
Traceback (most recent call last):
...
TypeError: tuple must be an integer

>>> geo.integer_validator("set", {1, 2, 3})
Traceback (most recent call last):
...
TypeError: set must be an integer

>>> geo.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> geo.integer_validator("name")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> MyList = __import__('1-my_list').MyList

>>> len(__import__("1-my_list").__doc__) > 0
True

>>> len(__import__("1-my_list").MyList.__doc__) > 0
True

>>> len(__import__("1-my_list").MyList.print_sorted.__doc__) > 0
True

>>> my_list = MyList()
>>> my_list.print_sorted()
[]

>>> my_list = MyList('a')
>>> my_list.print_sorted()
['a']

>>> my_list = MyList('Holberton')
>>> my_list.print_sorted()
['H', 'b', 'e', 'l', 'n', 'o', 'o', 'r', 't']

>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]

>>> my_list.append('e')
>>> my_list.print_sorted()
Traceback (most recent call last):
...
TypeError: unorderable types: str() < int()

>>> my_list = MyList()
>>> my_list.append(0)
>>> my_list.append(0)
>>> my_list.append(0)
>>> my_list.append(1)
>>> my_list.print_sorted()
[0, 0, 0, 1]

>>> my_list = MyList(3.5)
Traceback (most recent call last):
...
TypeError: 'float' object is not iterable

>>> my_list = MyList(float('inf'))
Traceback (most recent call last):
...
TypeError: 'float' object is not iterable

>>> my_list = MyList(float('nan'))
Traceback (most recent call last):
...
TypeError: 'float' object is not iterable